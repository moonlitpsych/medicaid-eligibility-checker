#!/usr/bin/env node\n/**\n * Comprehensive Multi-Role Eligibility Testing Suite\n * Tests all three use cases with real patient data\n */\n\nconst fetch = require('node-fetch')\nrequire('dotenv').config()\n\nconst BASE_URL = process.env.BASE_URL || 'http://localhost:3000'\nconst MOONLIT_URL = process.env.MOONLIT_URL || 'http://localhost:3001'\n\n// Test patient data (using Jeremy Montoya from CLAUDE.md)\nconst TEST_PATIENTS = {\n  jeremy: {\n    firstName: 'Jeremy',\n    lastName: 'Montoya', \n    dob: '1984-07-17',\n    medicaidId: 'UT123456789', // Mock ID\n    insuranceName: 'Utah Medicaid',\n    email: 'jeremy.montoya@example.com',\n    phone: '(801) 555-0123'\n  },\n  sarah: {\n    firstName: 'Sarah',\n    lastName: 'Johnson',\n    dob: '1985-03-15', \n    medicaidId: 'UT987654321',\n    insuranceName: 'Molina Healthcare',\n    email: 'sarah.johnson@example.com',\n    phone: '(801) 555-0456'\n  },\n  michael: {\n    firstName: 'Michael',\n    lastName: 'Chen',\n    dob: '1992-07-22',\n    medicaidId: 'UT456789123', \n    insuranceName: 'Utah Medicaid',\n    email: 'michael.chen@example.com',\n    phone: '(801) 555-0789'\n  }\n}\n\nclass MultiRoleTestSuite {\n  constructor() {\n    this.results = []\n    this.startTime = Date.now()\n  }\n\n  log(message, level = 'info') {\n    const timestamp = new Date().toISOString().split('T')[1].split('.')[0]\n    const prefix = {\n      info: '\ud83d\udcdd',\n      success: '\u2705', \n      error: '\u274c',\n      warning: '\u26a0\ufe0f'\n    }[level] || '\ud83d\udcdd'\n    \n    console.log(`${prefix} [${timestamp}] ${message}`)\n  }\n\n  async testEligibilityAPI(patient, context = {}) {\n    try {\n      const response = await fetch(`${BASE_URL}/api/medicaid/check`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...(context.role && { 'X-Booking-Context': JSON.stringify(context) })\n        },\n        body: JSON.stringify({\n          first: patient.firstName,\n          last: patient.lastName, \n          dob: patient.dob,\n          medicaidId: patient.medicaidId,\n          insuranceName: patient.insuranceName,\n          bookingContext: context\n        })\n      })\n\n      const data = await response.json()\n      const responseTime = Date.now() - this.startTime\n      \n      return {\n        success: response.ok,\n        status: response.status,\n        data,\n        responseTime,\n        patient: `${patient.firstName} ${patient.lastName}`\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        patient: `${patient.firstName} ${patient.lastName}`\n      }\n    }\n  }\n\n  async testMoonlitIntegration(patient, context = {}) {\n    try {\n      const response = await fetch(`${MOONLIT_URL}/api/eligibility/check`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          first: patient.firstName,\n          last: patient.lastName,\n          dob: patient.dob,\n          medicaidId: patient.medicaidId,\n          insuranceName: patient.insuranceName,\n          bookingContext: context\n        })\n      })\n\n      const data = await response.json()\n      \n      return {\n        success: response.ok,\n        status: response.status,\n        data,\n        patient: `${patient.firstName} ${patient.lastName}`,\n        integration: 'moonlit-scheduler'\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message,\n        patient: `${patient.firstName} ${patient.lastName}`,\n        integration: 'moonlit-scheduler'\n      }\n    }\n  }\n\n  async runUseCase1_PatientSelfService() {\n    this.log('\\n=== USE CASE 1: Patient Self-Service Booking ===', 'info')\n    \n    const testCases = [\n      {\n        name: 'Jeremy Montoya - Utah Medicaid (Known Active)',\n        patient: TEST_PATIENTS.jeremy,\n        context: { role: 'patient', userAgent: 'patient-portal' }\n      },\n      {\n        name: 'Sarah Johnson - Molina Healthcare',\n        patient: TEST_PATIENTS.sarah,\n        context: { role: 'patient', userAgent: 'patient-portal' }\n      }\n    ]\n\n    for (const testCase of testCases) {\n      this.log(`Testing: ${testCase.name}`, 'info')\n      \n      // Test direct API\n      const directResult = await this.testEligibilityAPI(testCase.patient, testCase.context)\n      this.results.push({\n        useCase: 'Patient Self-Service',\n        test: testCase.name,\n        api: 'direct',\n        ...directResult\n      })\n      \n      if (directResult.success) {\n        this.log(`  Direct API: ${directResult.data.enrolled ? 'ENROLLED' : 'NOT ENROLLED'} (${directResult.responseTime}ms)`, 'success')\n      } else {\n        this.log(`  Direct API: FAILED - ${directResult.error}`, 'error')\n      }\n      \n      // Test moonlit integration\n      const moonlitResult = await this.testMoonlitIntegration(testCase.patient, testCase.context)\n      this.results.push({\n        useCase: 'Patient Self-Service',\n        test: testCase.name,\n        api: 'moonlit-integration',\n        ...moonlitResult\n      })\n      \n      if (moonlitResult.success) {\n        this.log(`  Moonlit Integration: ${moonlitResult.data.canSchedule ? 'CAN SCHEDULE' : 'CANNOT SCHEDULE'}`, 'success')\n        this.log(`  Network Status: ${moonlitResult.data.networkStatus || 'unknown'}`, 'info')\n      } else {\n        this.log(`  Moonlit Integration: FAILED - ${moonlitResult.error}`, 'error')\n      }\n    }\n  }\n\n  async runUseCase2_CaseManagerPortal() {\n    this.log('\\n=== USE CASE 2: Case Manager Assistance Portal ===', 'info')\n    \n    const testCases = [\n      {\n        name: 'Case Manager booking for Jeremy Montoya',\n        patient: TEST_PATIENTS.jeremy,\n        context: { \n          role: 'case-manager',\n          caseManagerId: 'CM001',\n          organization: 'Utah Community Health Centers',\n          patientConsent: true\n        }\n      },\n      {\n        name: 'Case Manager booking for Michael Chen', \n        patient: TEST_PATIENTS.michael,\n        context: {\n          role: 'case-manager',\n          caseManagerId: 'CM001',\n          organization: 'Utah Community Health Centers',\n          patientConsent: true\n        }\n      }\n    ]\n\n    for (const testCase of testCases) {\n      this.log(`Testing: ${testCase.name}`, 'info')\n      \n      const result = await this.testEligibilityAPI(testCase.patient, testCase.context)\n      this.results.push({\n        useCase: 'Case Manager Portal',\n        test: testCase.name,\n        api: 'direct',\n        ...result\n      })\n      \n      if (result.success) {\n        this.log(`  Eligibility: ${result.data.enrolled ? 'VERIFIED' : 'UNVERIFIED'}`, result.data.enrolled ? 'success' : 'warning')\n        this.log(`  Case Manager Can Proceed: ${result.data.canSchedule !== false ? 'YES' : 'NO'}`, 'info')\n        \n        // Test case manager specific features\n        if (result.data.roleSpecificGuidance) {\n          this.log(`  Guidance: ${result.data.roleSpecificGuidance}`, 'info')\n        }\n      } else {\n        this.log(`  Case Manager Test: FAILED - ${result.error}`, 'error')\n      }\n      \n      // Test moonlit integration for case managers\n      const moonlitResult = await this.testMoonlitIntegration(testCase.patient, testCase.context)\n      if (moonlitResult.success) {\n        this.log(`  Moonlit Integration: Case manager booking ${moonlitResult.data.canSchedule ? 'ALLOWED' : 'BLOCKED'}`, \n                 moonlitResult.data.canSchedule ? 'success' : 'warning')\n      }\n    }\n  }\n\n  async runUseCase3_AdminStaffVerification() {\n    this.log('\\n=== USE CASE 3: Admin/Staff Same-Day Verification ===', 'info')\n    \n    const testCases = [\n      {\n        name: 'Same-day verification for Jeremy Montoya (Urgent)',\n        patient: TEST_PATIENTS.jeremy,\n        context: {\n          role: 'admin',\n          staffId: 'DR001',\n          urgent: true,\n          appointmentType: 'initial-consultation',\n          appointmentTime: new Date().toISOString(),\n          patientWaiting: true\n        }\n      },\n      {\n        name: 'Pre-appointment verification for Sarah Johnson',\n        patient: TEST_PATIENTS.sarah,\n        context: {\n          role: 'admin',\n          staffId: 'RN002', \n          urgent: false,\n          appointmentType: 'follow-up',\n          appointmentTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), // 2 hours from now\n          batchProcessing: false\n        }\n      },\n      {\n        name: 'Batch verification test',\n        patient: TEST_PATIENTS.michael,\n        context: {\n          role: 'admin',\n          staffId: 'AD003',\n          batchProcessing: true,\n          batchId: `batch_${Date.now()}`,\n          todaysSchedule: true\n        }\n      }\n    ]\n\n    for (const testCase of testCases) {\n      this.log(`Testing: ${testCase.name}`, 'info')\n      \n      const startTime = Date.now()\n      const result = await this.testEligibilityAPI(testCase.patient, testCase.context)\n      const processingTime = Date.now() - startTime\n      \n      this.results.push({\n        useCase: 'Admin/Staff Verification',\n        test: testCase.name,\n        api: 'direct',\n        processingTime,\n        ...result\n      })\n      \n      if (result.success) {\n        const status = result.data.enrolled ? 'COVERED' : 'NOT COVERED'\n        const urgencyStatus = testCase.context.urgent ? ' (URGENT)' : ''\n        this.log(`  Verification: ${status}${urgencyStatus} (${processingTime}ms)`, \n                 result.data.enrolled ? 'success' : 'warning')\n        \n        if (testCase.context.urgent) {\n          // Urgent cases should be fast\n          if (processingTime > 2000) {\n            this.log(`  WARNING: Urgent verification took ${processingTime}ms (should be <2000ms)`, 'warning')\n          } else {\n            this.log(`  Urgent verification completed in ${processingTime}ms ✓`, 'success')\n          }\n        }\n        \n        // Check if staff can proceed with appointment\n        const canProceed = result.data.enrolled || testCase.context.role === 'admin'\n        this.log(`  Staff Action: ${canProceed ? 'PROCEED WITH APPOINTMENT' : 'DISCUSS SELF-PAY OPTIONS'}`, \n                 canProceed ? 'success' : 'warning')\n      } else {\n        this.log(`  Admin Verification: FAILED - ${result.error}`, 'error')\n      }\n    }\n  }\n\n  async runIntegrationTests() {\n    this.log('\\n=== INTEGRATION TESTS ===', 'info')\n    \n    // Test cross-system communication\n    this.log('Testing medicaid-eligibility-checker → moonlit-scheduler integration', 'info')\n    \n    const integrationTestResult = await this.testMoonlitIntegration(TEST_PATIENTS.jeremy, {\n      role: 'patient',\n      timeSlot: {\n        start_time: '2025-01-15T14:30:00Z',\n        provider_id: 'PROV001'\n      },\n      payer: {\n        id: 'UTMCD',\n        name: 'Utah Medicaid',\n        type: 'Medicaid'\n      }\n    })\n    \n    if (integrationTestResult.success) {\n      this.log('✅ Cross-system integration working', 'success')\n      this.log(`  Booking metadata: ${JSON.stringify(integrationTestResult.data.bookingMeta || {})}`, 'info')\n    } else {\n      this.log('❌ Cross-system integration failed', 'error')\n    }\n  }\n\n  async runPerformanceTests() {\n    this.log('\\n=== PERFORMANCE TESTS ===', 'info')\n    \n    const performanceTests = [\n      {\n        name: 'Concurrent patient requests',\n        count: 5,\n        patient: TEST_PATIENTS.jeremy\n      },\n      {\n        name: 'Mixed role requests',\n        count: 3,\n        patient: TEST_PATIENTS.sarah\n      }\n    ]\n    \n    for (const perfTest of performanceTests) {\n      this.log(`Testing: ${perfTest.name} (${perfTest.count} concurrent requests)`, 'info')\n      \n      const promises = []\n      const startTime = Date.now()\n      \n      for (let i = 0; i < perfTest.count; i++) {\n        const context = {\n          role: ['patient', 'case-manager', 'admin'][i % 3],\n          requestId: `perf_${i}_${Date.now()}`\n        }\n        promises.push(this.testEligibilityAPI(perfTest.patient, context))\n      }\n      \n      const results = await Promise.all(promises)\n      const totalTime = Date.now() - startTime\n      const avgTime = totalTime / perfTest.count\n      const successCount = results.filter(r => r.success).length\n      \n      this.log(`  Results: ${successCount}/${perfTest.count} successful`, successCount === perfTest.count ? 'success' : 'warning')\n      this.log(`  Average response time: ${Math.round(avgTime)}ms`, avgTime < 1000 ? 'success' : 'warning')\n      this.log(`  Total time: ${totalTime}ms`, 'info')\n    }\n  }\n\n  generateReport() {\n    this.log('\\n=== TEST REPORT ===', 'info')\n    \n    const totalTests = this.results.length\n    const successfulTests = this.results.filter(r => r.success).length\n    const failedTests = totalTests - successfulTests\n    const successRate = Math.round((successfulTests / totalTests) * 100)\n    \n    this.log(`Total Tests: ${totalTests}`, 'info')\n    this.log(`Successful: ${successfulTests}`, 'success')\n    this.log(`Failed: ${failedTests}`, failedTests > 0 ? 'error' : 'success')\n    this.log(`Success Rate: ${successRate}%`, successRate >= 90 ? 'success' : 'warning')\n    \n    // Group by use case\n    const useCaseResults = this.results.reduce((acc, result) => {\n      const useCase = result.useCase || 'Unknown'\n      if (!acc[useCase]) acc[useCase] = []\n      acc[useCase].push(result)\n      return acc\n    }, {})\n    \n    for (const [useCase, results] of Object.entries(useCaseResults)) {\n      const caseSuccess = results.filter(r => r.success).length\n      const caseTotal = results.length\n      const caseRate = Math.round((caseSuccess / caseTotal) * 100)\n      \n      this.log(`\\n${useCase}: ${caseSuccess}/${caseTotal} (${caseRate}%)`, \n               caseRate >= 90 ? 'success' : 'warning')\n      \n      // Show failed tests\n      const failedInCase = results.filter(r => !r.success)\n      for (const failed of failedInCase) {\n        this.log(`  ❌ ${failed.test}: ${failed.error || 'Unknown error'}`, 'error')\n      }\n    }\n    \n    // Response time analysis\n    const responseTimes = this.results\n      .filter(r => r.responseTime || r.processingTime)\n      .map(r => r.responseTime || r.processingTime)\n    \n    if (responseTimes.length > 0) {\n      const avgResponseTime = Math.round(responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length)\n      const maxResponseTime = Math.max(...responseTimes)\n      const minResponseTime = Math.min(...responseTimes)\n      \n      this.log(`\\nResponse Time Analysis:`, 'info')\n      this.log(`  Average: ${avgResponseTime}ms`, avgResponseTime < 1000 ? 'success' : 'warning')\n      this.log(`  Min: ${minResponseTime}ms`, 'info')\n      this.log(`  Max: ${maxResponseTime}ms`, maxResponseTime < 2000 ? 'success' : 'warning')\n    }\n  }\n\n  async run() {\n    this.log('🚀 Starting Multi-Role Eligibility Testing Suite', 'info')\n    this.log(`Testing against: ${BASE_URL}`, 'info')\n    this.log(`Moonlit integration: ${MOONLIT_URL}`, 'info')\n    \n    try {\n      await this.runUseCase1_PatientSelfService()\n      await this.runUseCase2_CaseManagerPortal()\n      await this.runUseCase3_AdminStaffVerification()\n      await this.runIntegrationTests()\n      await this.runPerformanceTests()\n      \n      this.generateReport()\n      \n      this.log('\\n✅ All tests completed!', 'success')\n      \n    } catch (error) {\n      this.log(`\\n❌ Test suite failed: ${error.message}`, 'error')\n      console.error(error)\n      process.exit(1)\n    }\n  }\n}\n\n// Run the test suite\nif (require.main === module) {\n  const testSuite = new MultiRoleTestSuite()\n  testSuite.run().catch(console.error)\n}\n\nmodule.exports = MultiRoleTestSuite